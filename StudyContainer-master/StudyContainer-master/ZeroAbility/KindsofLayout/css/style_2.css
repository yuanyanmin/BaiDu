* {
    margin: 0;
    padding: 0;
}

a {
    color: darkslateblue;
    text-decoration: none;
}

a:hover {
    color: darkblue;
    text-decoration: none;
}

h2 {
    text-align: center
}

span {
    color: orange;
}

.demend {
    width: 100%;
    text-align: center;
}

.contentbox {
    width: 700px;
    margin: 30px auto;
    border: 1px solid gray;
}

.con-desc {
    text-decoration: none;
    font-size: 30px;
}

.contentbox img {
    width: 100%;
    height: auto;
    border: 1px solid greenyellow;
}

/* 两栏式布局左30%右70% */

.outside1 {
    width: 100%;
    height: 400px;
    /* 由于子元素使用了定位会完全脱离文档流，包括内容在内，所以，overflow清除浮动的方法已经不适用，要么去掉overflow要么加高 */
    overflow: hidden;
    /* 不然子级的内容等会被隐藏 */
    position: relative;
    /* 建立相关性，即参考元素 */
}

.layout1left {
    width: 30%;
    height: 400px;
    background-color: greenyellow;
    position: absolute;
    left: 0px;
}

.layout1right {
    width: 70%;
    height: 400px;
    background-color: lightsalmon;
    position: absolute;
    right: 0px;
}

/* 两栏布局左固定右自适应 */

.outside2 {
    width: 100%;
    height: 400px;
    /* overflow: hidden; */
    position: relative;
}

.layout2left {
    width: 300px;
    height: 400px;
    background-color: greenyellow;
    position: absolute;
    z-index: 1;
    left: 0px;
}

.layout2right {
    width: 100%;
    height: 400px;
    background-color: lightsalmon;
    position: absolute;
    word-wrap: break-word;
    /* padding-left: 300px; */
    /* 父元素的定位使padding失效 */
    right: 0px;
}

/* 两栏布局右边固定左边自适应 */

.outside3 {
    width: 100%;
    height: 400px;
    overflow: hidden;
    position: relative;
}

.layout3left {
    width: 100%;
    height: 400px;
    background-color: greenyellow;
    word-break: break-all;
    position: absolute;
    left: 0;
}

.layout3right {
    width: 300px;
    height: 400px;
    background-color: lightsalmon;
    position: absolute;
    /* 因为默认是后面的元素优先显示，所以不用加z-index更改层级优先级 */
    right: 0;
}

/* 三栏布局左右固定中间自适应 */

.outside4 {
    width: 100%;
    height: 400px;
    /* overflow: hidden; */
    position: relative;
}

.layout4left {
    width: 300px;
    height: 400px;
    background-color: greenyellow;
    position: absolute;
    left: 0;
}

.layout4middle {
    width: 100%;
    height: 400px;
    background-color: pink;
    word-break: break-all;
    position: absolute;
    z-index: -1;
    left: 0;
}

.layout4right {
    width: 300px;
    height: 400px;
    background-color: lightsalmon;
    position: absolute;
    right: 0;
}

/* 左中固定宽度，右边自适应 */

.outside5 {
    width: 100%;
    height: 400px;
    /* overflow: hidden; */
    position: relative;
}

.layout5left {
    width: 300px;
    height: 400px;
    background-color: greenyellow;
    position: absolute;
    left: 0px;
}

.layout5middle {
    width: 300px;
    height: 400px;
    background-color: lightsalmon;
    position: absolute;
    left: 300px;
}

.layout5right {
    width: 100%;
    height: 400px;
    background-color: pink;
    word-break: break-all;
    box-sizing: border-box;
    padding-left: 600px;  /* 这里是处理层级覆盖的第二种方法，使用IE标准盒模型然后加内边距实现，可见我上一节笔记对IE标准盒模型的讲解 */
    position: absolute;
    right: 0;
    z-index: -1;
}
